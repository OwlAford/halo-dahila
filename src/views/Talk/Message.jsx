import React from 'react'
import { observable, computed, action } from 'mobx'
import { observer, inject } from 'mobx-react'
import classNames from 'classnames'
import { sendMessage } from '~/constants/connect'
import { formatDate } from '~/filters'
import { withToast } from '^/Toast'

@withToast

@inject(stores => {
  const {
    chat: {
      chatName,
      chatAvatar,
      needReg,
      prevDate,
      curChatList
    }
  } = stores
  return {
    chatName,
    chatAvatar,
    needReg,
    curChatList,
    prevDate,
    triggerPrevHandle: () => stores.chat.triggerPrevHandle()
  }
})

@observer
export default class Message extends React.Component {
  @observable showEmojiList = false
  @observable talkingText = ''
  @observable sendIngState = false

  couldAutoScroll = true

  emojiArray = ['‚òÄ', '‚òÅ', '‚òî', '‚õÑ', '‚ö°', 'üåÄ', 'üåÇ', 'üåô', 'üåü', 'üçÄ', 'üå∑', 'üå±', 'üçÅ', 'üå∏', 'üåπ', 'üçÇ', 'üçÉ', 'üå∫', 'üåª', 'üå¥', 'üåµ', 'üåæ', 'üçé', 'üçä', 'üçì', 'üëÄ', 'üëÇ', 'üëÉ', 'üëÑ', 'üëÖ', 'üíÖ', 'üë¶', 'üëß', 'üë®', 'üë©', 'üë´', 'üëÆ', 'üë±', 'üë≤', 'üë≥', 'üë¥', 'üëµ', 'üë∂', 'üë∑', 'üë∏', 'üëØ', 'üëª', 'üëº', 'üëΩ', 'üëæ', 'üëø', 'üíÄ', 'üíÇ', 'üíÉ', 'üêç', 'üêé', 'üêî', 'üêó', 'üê´', 'üêò', 'üê®', 'üêí', 'üêë', 'üêô', 'üêö', 'üêõ', 'üê†', 'üê°', 'üê•', 'üê¶', 'üêß', 'üê©', 'üêü', 'üê¨', 'üê≠', 'üêØ', 'üê±', 'üê≥', 'üê¥', 'üêµ', 'üê∂', 'üê∑', 'üêª', 'üêπ', 'üê∫', 'üêÆ', 'üê∞', 'üê∏', 'üêæ', 'üò†', 'üò©', 'üò≤', 'üòû', 'üòµ', 'üò∞', 'üòí', 'üòç', 'üò§', 'üòú', 'üòù', 'üòã', 'üòò', 'üòö', 'üò∑', 'üò≥', 'üòÉ', 'üòÜ', 'üòÅ', 'üòÇ', '‚ò∫', 'üòÑ', 'üò¢', 'üò≠', 'üò®', 'üò£', 'üò°', 'üòå', 'üòñ', 'üòî', 'üò±', 'üò™', 'üòè', 'üòì', 'üò•', 'üò´', 'üòâ', 'üò∫', 'üò∏', 'üòπ', 'üòΩ', 'üòª', 'üòø', 'üòº', 'üôÄ', 'üôã', 'üôå', 'üôç', 'üôè', 'üî•', 'üéÅ', 'üéÑ', 'üéÖ', 'üéà', 'üéâ', 'üéç', 'üéé', 'üéì', 'üéè', 'üéê', 'üéÉ', 'üìû', 'üì±', 'üì≤', 'üì†', 'üíª', 'üíΩ', 'üíæ', 'üíø', 'üìÄ', 'üéµ', 'üé∂', 'üéº', 'üì∫', 'üíã', 'üíè', 'üíê', 'üíë', 'üçî', '‚òï', 'üç∏', 'üç∫', '‚ù§', 'üíì', 'üíî', 'üíñ', 'üíó', 'üíò', 'üíô', 'üíö', 'üíõ', 'üíú', 'üíù', '‚ô•', 'üí¢', 'üí§', 'üí¶', 'üí®', 'üí©', 'üí™', '‚ú®', 'üîî', '‚úä', '‚úã', '‚úå', 'üëä', 'üëç', '‚òù', 'üëÜ', 'üëá', 'üëà', 'üëâ', 'üëã', 'üëè', 'üëå', 'üëé', 'üëê']

  @computed get couldSend () {
    return this.talkingText.length !== 0 && !this.props.needReg && !this.sendIngState
  }

  componentDidMount () {
    const params = {
      disableTouch: true,
      scrollbars: true,
      mouseWheel: true,
      fadeScrollbars: true
    }
    this.talkScroll = new IScroll(this.refs.$talkList, params)

    this.talkScroll.on('scrollEnd', () => {
      if (this.talkScroll.y === this.talkScroll.maxScrollY) {
        this.couldAutoScroll = true
      }
    })
  }

  componentDidUpdate () {
    if (this.talkScroll) {
      this.talkScroll.refresh()

      this.couldAutoScroll &&
      this.talkScroll.scrollTo(0, this.talkScroll.maxScrollY, 300)
    }
  }

  componentWillUnmount () {
    this.talkScroll.destroy()
  }

  @action
  editTalkText (e) {
    this.talkingText = e.target.value
  }

  @action
  emojiShowHandle (e, state) {
    this.showEmojiList = state
    e && e.stopPropagation()
  }

  appendEmoji (e) {
    this.talkingText += e.target.innerText
    this.emojiShowHandle(null, false)
  }

  triggerPrev () {
    this.props.triggerPrevHandle()
    this.couldAutoScroll = false
  }

  formatIdDate (id) {
    return formatDate(id.replace('id_', '') * 24 * 60 * 60 * 1000).ChineseFullDate
  }

  sendMessage () {
    if (this.couldSend) {
      const originText = this.talkingText
      let formatText = originText.replace('\n', '<br />')
      const uploadInfo = {
        text: formatText,
        time: Date.now(),
        author: this.props.chatName,
        avatar: this.props.chatAvatar,
        ip: window.returnCitySN.cip
      }
      // console.log(uploadInfo)
      this.sendIngState = true
      sendMessage(uploadInfo, () => {
        this.sendIngState = false
        this.talkingText = ''
      }, this.refreshTalkListHandle, () => {
        this.props.showMessage('Ê∂àÊÅØÂèëÈÄÅÂ§±Ë¥•ÔºÅ', 2000)
      })
    }
  }

  sendPress (e) {
    if (e.key === 'Enter' && e.ctrlKey) {
      this.sendMessage()
    }
  }

  render () {
    const {
      curChatList,
      prevDate
    } = this.props

    return (
      <div className='talk-content'>
        <div className='group-name'>ÊäÄÊúØËÆ®ËÆ∫‰∫§ÊµÅ</div>
        <div className='talking-cxt' ref='$talkList'>
          <div className='chat-list'>
            {
              prevDate &&
              <div className='before-view'>
                <span>
                  {this.formatIdDate(prevDate)}
                  <span
                    className='jump'
                    onClick={e => { this.triggerPrev() }}
                  >ÁÇπÂáªÊü•Áúã</span>
                </span>
              </div>
            }
            {
              curChatList.map((item, i) => {
                return (
                  <div className='date-group' key={i}>
                    {
                      item.map((sub, j) => {
                        return (
                          <div
                            key={j}
                            className={classNames('chat-list-item', {
                              'dir-right': window.returnCitySN.cip === sub.ip
                            })}
                          >
                            <i
                              alt={sub.avatar}
                              className={'round-avatar ' + sub.avatar}
                            >
                              <div className='send-time'>{formatDate(sub.time).clock}</div>
                            </i>
                            <div className='nicname'>{sub.author}</div>
                            <div
                              className='message-detail'
                              dangerouslySetInnerHTML={{ __html: sub.text }}
                            />
                          </div>
                        )
                      })
                    }
                  </div>
                )
              })
            }
          </div>
        </div>
        <div className='talking-input'>
          <div className='txtipt'>
            <textarea
              name='fm-ipt'
              placeholder='ËØ∑ËæìÂÖ•ËÅäÂ§©ÂÜÖÂÆπ'
              value={this.talkingText}
              onChange={e => { this.editTalkText(e) }}
              onKeyDown={e => { this.sendPress(e) }}
            />
          </div>
          <div className='emoji'>
            <div
              className='iconfont inner'
              onClick={e => { this.emojiShowHandle(e, !this.showEmojiList) }}
            >
              &#xe628;
            </div>
            <div
              className={classNames('emojilist', {
                show: this.showEmojiList
              })}
            >
              {
                this.emojiArray.map((item, i) => (
                  <div key={i} onClick={e => { this.appendEmoji(e) }}>{item}</div>
                ))
              }
            </div>
          </div>
          <div
            className={classNames('send-btn', {
              'disabled': !this.couldSend,
              'loading': this.sendIngState
            })}
            onClick={e => { this.sendMessage() }}
          >
            <span className='iconfont'>&#xe662;</span>
            <i className='dot' />
            <i className='dot' />
            <i className='dot' />
            <i className='dot' />
          </div>
        </div>
      </div>
    )
  }
}
